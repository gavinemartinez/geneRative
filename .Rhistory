}
# Example usage with user input options
generate_random_walk_art(num_steps = 5000, seed = 987, color_palette = "magma", line_thickness = 1.5)
install.packages("viridis")
library(viridis)
generate_random_walk_art(num_steps = 5000, seed = 987, color_palette = "magma", line_thickness = 1.5)
library(viridis)
generate_random_walk_art(num_steps = 5000, seed = 987, color_palette = "magma", line_thickness = 1.5)
library(viridis)
generate_random_walk_art(num_steps = 5000, seed = 987, color_palette = "magma", line_thickness = 1.5)
install.packages("magma")
#' Generate Spiral Generative Art
#'
#' @param width width of the generated art (in pixels)
#' @param height height of the generated art (in pixels)
#' @param num_points number of points to generate
#' @param rotations number of rotations for the spiral
#' @param seed random seed for reproducibility
#'
#' @return Spiral generative art plot
#'
#' @import ggplot2
#' @import viridis
#'
#' @export
#'
generate_random_walk_art <- function(num_steps = 1000, seed = 123, line_thickness = 1) {
set.seed(seed)
# Initialize variables
x <- 0
y <- 0
# Generate random walk coordinates
walk <- data.frame(
x = numeric(num_steps),
y = numeric(num_steps)
)
for (i in 1:num_steps) {
direction <- sample(1:4, 1)
# Update coordinates based on the chosen direction
if (direction == 1) {
x <- x + 1
} else if (direction == 2) {
x <- x - 1
} else if (direction == 3) {
y <- y + 1
} else if (direction == 4) {
y <- y - 1
}
# Store the coordinates
walk[i, "x"] <- x
walk[i, "y"] <- y
}
# Create the random walk art plot
plot <- ggplot(walk, aes(x = x, y = y)) +
geom_path(size = line_thickness, aes(color = seq(0, 1, length.out = num_steps))) +
scale_color_viridis_c(option = "magma") +
theme_void()
return(plot)
}
# Example usage with user input options
library(viridis)
generate_random_walk_art(num_steps = 5000, seed = 987, line_thickness = 1.5)
generate_random_walk_art <- function(num_steps = 1000, seed = 123, line_thickness = 1) {
set.seed(seed)
# Initialize variables
x <- 0
y <- 0
# Generate random walk coordinates
walk <- data.frame(
x = numeric(num_steps),
y = numeric(num_steps)
)
for (i in 1:num_steps) {
direction <- sample(1:4, 1)
# Update coordinates based on the chosen direction
if (direction == 1) {
x <- x + 1
} else if (direction == 2) {
x <- x - 1
} else if (direction == 3) {
y <- y + 1
} else if (direction == 4) {
y <- y - 1
}
# Store the coordinates
walk[i, "x"] <- x
walk[i, "y"] <- y
}
# Create the random walk art plot
plot <- ggplot(walk, aes(x = x, y = y)) +
geom_path(size = line_thickness, aes(color = seq(0, 1, length.out = num_steps))) +
scale_color_viridis_c(option = "magma") +
theme_void()
theme(legend.position = "none")
return(plot)
}
# Example usage with user input options
library(viridis)
generate_random_walk_art(num_steps = 5000, seed = 987, line_thickness = 1.5)
#' Generate Spiral Generative Art
#'
#' @param width width of the generated art (in pixels)
#' @param height height of the generated art (in pixels)
#' @param num_points number of points to generate
#' @param rotations number of rotations for the spiral
#' @param seed random seed for reproducibility
#'
#' @return Spiral generative art plot
#'
#' @import ggplot2
#' @import viridis
#'
#' @export
#'
generate_random_walk_art <- function(num_steps = 1000, seed = 123, line_thickness = 1) {
set.seed(seed)
# Initialize variables
x <- 0
y <- 0
# Generate random walk coordinates
walk <- data.frame(
x = numeric(num_steps),
y = numeric(num_steps)
)
for (i in 1:num_steps) {
direction <- sample(1:4, 1)
# Update coordinates based on the chosen direction
if (direction == 1) {
x <- x + 1
} else if (direction == 2) {
x <- x - 1
} else if (direction == 3) {
y <- y + 1
} else if (direction == 4) {
y <- y - 1
}
# Store the coordinates
walk[i, "x"] <- x
walk[i, "y"] <- y
}
# Create the random walk art plot
plot <- ggplot(walk, aes(x = x, y = y)) +
geom_path(size = line_thickness, aes(color = seq(0, 1, length.out = num_steps))) +
scale_color_viridis_c(option = "magma") +
theme_void() +
theme(legend.position = "none")
return(plot)
}
# Example usage with user input options
library(viridis)
generate_random_walk_art(num_steps = 5000, seed = 987, line_thickness = 1.5)
#' Generate Spiral Generative Art
#'
#' @param width width of the generated art (in pixels)
#' @param height height of the generated art (in pixels)
#' @param num_points number of points to generate
#' @param rotations number of rotations for the spiral
#' @param seed random seed for reproducibility
#'
#' @return Spiral generative art plot
#'
#' @import ggplot2
#' @import viridis
#'
#' @export
#'
<- function(num_steps = 1000, seed = 18, line_thickness = 1) {
#' Generate Spiral Generative Art
#'
#' @param width width of the generated art (in pixels)
#' @param height height of the generated art (in pixels)
#' @param num_points number of points to generate
#' @param rotations number of rotations for the spiral
#' @param seed random seed for reproducibility
#'
#' @return Spiral generative art plot
#'
#' @import ggplot2
#' @import viridis
#'
#' @export
#'
walk_art <- function(num_steps = 1000, seed = 18, line_thickness = 1) {
set.seed(seed)
# Initialize variables
x <- 0
y <- 0
# Generate random walk coordinates
walk <- data.frame(
x = numeric(num_steps),
y = numeric(num_steps)
)
for (i in 1:num_steps) {
direction <- sample(1:4, 1)
# Update coordinates based on the chosen direction
if (direction == 1) {
x <- x + 1
} else if (direction == 2) {
x <- x - 1
} else if (direction == 3) {
y <- y + 1
} else if (direction == 4) {
y <- y - 1
}
walk[i, "x"] <- x
walk[i, "y"] <- y
}
ggplot(walk, aes(x = x, y = y)) +
geom_path(size = line_thickness, aes(color = seq(0, 1, length.out = num_steps))) +
scale_color_viridis_c(option = "magma") +
theme_void() +
theme(legend.position = "none")
return(plot)
}
walk_art(num_steps = 5000, seed = 987, line_thickness = 1.5)
#' Generate Spiral Generative Art
#'
#' @param width width of the generated art (in pixels)
#' @param height height of the generated art (in pixels)
#' @param num_points number of points to generate
#' @param rotations number of rotations for the spiral
#' @param seed random seed for reproducibility
#'
#' @return Spiral generative art plot
#'
#' @import ggplot2
#' @import viridis
#'
#' @export
#'
walk_art <- function(num_steps = 1000, seed = 18, line_thickness = 1) {
set.seed(seed)
# Initialize variables
x <- 0
y <- 0
# Generate random walk coordinates
walk <- data.frame(
x = numeric(num_steps),
y = numeric(num_steps)
)
for (i in 1:num_steps) {
direction <- sample(1:4, 1)
# Update coordinates based on the chosen direction
if (direction == 1) {
x <- x + 1
} else if (direction == 2) {
x <- x - 1
} else if (direction == 3) {
y <- y + 1
} else if (direction == 4) {
y <- y - 1
}
walk[i, "x"] <- x
walk[i, "y"] <- y
}
ggplot(walk, aes(x = x, y = y)) +
geom_path(size = line_thickness, aes(color = seq(0, 1, length.out = num_steps))) +
scale_color_viridis_c(option = "magma") +
theme_void() +
theme(legend.position = "none")
}
walk_art(num_steps = 5000, seed = 987, line_thickness = 1.5)
#' Generate Spiral Generative Art
#'
#' @param width width of the generated art (in pixels)
#' @param height height of the generated art (in pixels)
#' @param num_points number of points to generate
#' @param rotations number of rotations for the spiral
#' @param seed random seed for reproducibility
#'
#' @return Spiral generative art plot
#'
#' @import ggplot2
#' @import viridis
#'
#' @export
#'
walk_art <- function(num_steps = 1000, seed = 18, line_thickness = 1) {
set.seed(seed)
# Initialize variables
x <- 0
y <- 0
# Generate random walk coordinates
walk <- data.frame(
x = numeric(num_steps),
y = numeric(num_steps)
)
for (i in 1:num_steps) {
direction <- sample(1:4, 1)
# Update coordinates based on the chosen direction
if (direction == 1) {
x <- x + 1
} else if (direction == 2) {
x <- x - 1
} else if (direction == 3) {
y <- y + 1
} else if (direction == 4) {
y <- y - 1
}
walk[i, "x"] <- x
walk[i, "y"] <- y
}
ggplot(walk, aes(x = x, y = y)) +
geom_path(size = line_thickness, aes(color = seq(0, 1, length.out = num_steps))) +
scale_color_viridis_c(option = "magma") +
theme_void() +
theme(legend.position = "none")
}
walk_art(num_steps = 5000, seed = 987, line_thickness = 1.5)
#' Generate Spiral Generative Art
#'
#' @param width width of the generated art (in pixels)
#' @param height height of the generated art (in pixels)
#' @param num_points number of points to generate
#' @param rotations number of rotations for the spiral
#' @param seed random seed for reproducibility
#'
#' @return Spiral generative art plot
#'
#' @import ggplot2
#' @import viridis
#'
#' @export
#'
walk_art <- function(num_steps = 1000, seed = 18, line_thickness = 1) {
set.seed(seed)
# Initialize variables
x <- 0
y <- 0
# Generate random walk coordinates
walk <- data.frame(
x = numeric(num_steps),
y = numeric(num_steps)
)
for (i in 1:num_steps) {
direction <- sample(1:4, 1)
# Update coordinates based on the chosen direction
if (direction == 1) {
x <- x + 1
} else if (direction == 2) {
x <- x - 1
} else if (direction == 3) {
y <- y + 1
} else if (direction == 4) {
y <- y - 1
}
walk[i, "x"] <- x
walk[i, "y"] <- y
}
ggplot(walk, aes(x = x, y = y)) +
geom_path(size = line_thickness, aes(color = seq(0, 1, length.out = num_steps))) +
scale_color_viridis_c(option = "magma") +
theme_void() +
theme(legend.position = "none")
}
walk_art(num_steps = 5000, seed = 21, line_thickness = 1.5)
#' Generate Spiral Generative Art
#'
#' @param width width of the generated art (in pixels)
#' @param height height of the generated art (in pixels)
#' @param num_points number of points to generate
#' @param rotations number of rotations for the spiral
#' @param seed random seed for reproducibility
#'
#' @return Spiral generative art plot
#'
#' @import ggplot2
#' @import viridis
#'
#' @export
#'
walk_art <- function(num_steps = 1000, seed = 18, line_thickness = 1) {
set.seed(seed)
# Initialize variables
x <- 0
y <- 0
# Generate random walk coordinates
walk <- data.frame(
x = numeric(num_steps),
y = numeric(num_steps)
)
for (i in 1:num_steps) {
direction <- sample(1:4, 1)
# Update coordinates based on the chosen direction
if (direction == 1) {
x <- x + 1
} else if (direction == 2) {
x <- x - 1
} else if (direction == 3) {
y <- y + 1
} else if (direction == 4) {
y <- y - 1
}
walk[i, "x"] <- x
walk[i, "y"] <- y
}
ggplot(walk, aes(x = x, y = y)) +
geom_path(size = line_thickness, aes(color = seq(0, 1, length.out = num_steps))) +
scale_color_viridis_c(option = "magma") +
theme_void() +
theme(legend.position = "none")
}
walk_art(num_steps = 12, seed = 21, line_thickness = 1.5)
#' Generate Spiral Generative Art
#'
#' @param width width of the generated art (in pixels)
#' @param height height of the generated art (in pixels)
#' @param num_points number of points to generate
#' @param rotations number of rotations for the spiral
#' @param seed random seed for reproducibility
#'
#' @return Spiral generative art plot
#'
#' @import ggplot2
#' @import viridis
#'
#' @export
#'
walk_art <- function(num_steps = 1000, seed = 18, line_thickness = 1) {
set.seed(seed)
# Initialize variables
x <- 0
y <- 0
# Generate random walk coordinates
walk <- data.frame(
x = numeric(num_steps),
y = numeric(num_steps)
)
for (i in 1:num_steps) {
direction <- sample(1:4, 1)
# Update coordinates based on the chosen direction
if (direction == 1) {
x <- x + 1
} else if (direction == 2) {
x <- x - 1
} else if (direction == 3) {
y <- y + 1
} else if (direction == 4) {
y <- y - 1
}
walk[i, "x"] <- x
walk[i, "y"] <- y
}
ggplot(walk, aes(x = x, y = y)) +
geom_path(size = line_thickness, aes(color = seq(0, 1, length.out = num_steps))) +
scale_color_viridis_c(option = "magma") +
theme_void() +
theme(legend.position = "none")
}
walk_art(num_steps = 400, seed = 21, line_thickness = 1.5)
#' Generates random walk art
#'
#' @param num_steps the number of 'steps' taken on the walk
#' @param seed a number
#' @param line_thickness the thickness of the line
#'
#'
#' @return Spiral generative art plot
#'
#' @import ggplot2
#' @import viridis
#'
#' @export
#'
walk_art <- function(num_steps = 1000, seed = 18, line_thickness = 1) {
set.seed(seed)
# Initialize the variables at (0,0)
x <- 0
y <- 0
# Initialize the data frame
walk <- data.frame(
x = numeric(num_steps),
y = numeric(num_steps)
)
for (i in 1:num_steps) {
direction <- sample(1:4, 1)
if (direction == 1) {
x <- x + 1
} else if (direction == 2) {
x <- x - 1
} else if (direction == 3) {
y <- y + 1
} else if (direction == 4) {
y <- y - 1
}
walk[i, "x"] <- x
walk[i, "y"] <- y
}
#Plot the function - get rid of the grids and axes to make it look like art!
ggplot(walk, aes(x = x, y = y)) +
geom_path(size = line_thickness, aes(color = seq(0, 1, length.out = num_steps))) +
scale_color_viridis_c(option = "magma") +
theme_void() +
theme(legend.position = "none")
}
library(geneRative)
create_circle(radius = 0.5)
render_lines(x)
x <- create_circle(radius = 0.5)
render_lines(x)
bubble_plot(horizontal_shift = 2, background_color = "steelblue", bubble_alpha = 0.5)
```{r}
walk_art(num_steps = 6600, line_thickness = 0.7)
walk_art(num_steps = 6600, line_thickness = 0.7)
bubble_plot(horizontal_shift = 2, background_color = "steelblue", bubble_alpha = 0.5)
x <- create_circle(radius = 0.5)
render_lines(x)
generate_mosaic(num_boxes = 1600)
generate_mosaic(num_boxes = 1600)
library(geneRative)
generate_mosaic(num_boxes = 1600)
shards(iterations = 37, min = 0, max = 50)
